{
    "componentChunkName": "component---src-templates-doc-js",
    "path": "/docs/bedrock-equivalencies/resource-pack-conversion",
    "result": {"data":{"mdx":{"fields":{"pageType":"doc","title":"Resource Pack Conversion","editLink":"https://github.dev/mcjava-wiki/mcjava-wiki/blob/main/pages/docs/bedrock-equivalencies/resource-pack-conversion.mdx"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Resource Pack Conversion\",\n  \"section\": \"Bedrock Equivalencies\",\n  \"slug\": \"/docs/bedrock-equivalencies/resource-pack-conversion\",\n  \"order\": 1\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"resource-pack-conversion\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#resource-pack-conversion\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Resource Pack Conversion\"), mdx(\"p\", null, \"This page is meant to explain the process of converting a Java resource pack containing \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/pr-preview/pr-5/docs/basics/predicates\"\n  }, \"predicates\"), \" for use with Geyser, which currently include custom model data, damage, and unbreaking status. Though some code snipets may be given as examples, the primary purpose of this page is to explain the general process, whether in a manual or automated fashion.\"), mdx(\"h2\", {\n    \"id\": \"introduction\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Introduction\"), mdx(\"p\", null, \"Resource packs are inherently complex, and converting and using your particular pack with Geyser may be more complex. This information here is largely general and geared towards basic 2D and 3D models added through custom model data or damage predicates. Broader support for features like block models, blockstates, armor, sounds, emoji, custom bows, eating animations, inventory for 3D models, item frame displays, etc. may be added to converters and Geyser in the future. But recognize that at this time, you are largely on your own with more complex use cases like this, as the systems to automate these processes are still in development. The bulk of this overview is based on what I have learned from writing an automated bash script called \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/Kas-tle/java2bedrock.sh\"\n  }, \"java2bedrock\"), \". Do note, however, that this page does contain steps that the converter does not currently carry out. Some of this is due to a lack of support on Geyser's end, while some is due to implementation difficulties on the converter's end.\"), mdx(\"h2\", {\n    \"id\": \"concept\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#concept\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Concept\"), mdx(\"p\", null, \"When converting a resource pack from Java to Bedrock, even if the conversion process has been automated, it is important to understand what is being done. In the case of predicates commonly used in Java Edition, it must be noted that these do not directly exist on Bedrock Edition. However, Bedrock edition does have the ability to implement fully custom items. Geyser gets around this by allowing the user to map Java predicates to a Bedrock custom item. For more information on Bedrock custom items, please refer to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://wiki.bedrock.dev/items/items-intro.html\"\n  }, \"Items\"), \" section of the Bedrock Wiki. The following is an example of a Geyser item mappings file. More information about these files can be found on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://wiki.geysermc.org/geyser/custom-items/\"\n  }, \"Custom Items\"), \" page of the Geyser Wiki.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"highlights={4} title={./custom_mappings/geyser_mappings.json}\",\n    \"highlights\": \"{4}\",\n    \"title\": \"{./custom_mappings/geyser_mappings.json}\"\n  }, \"{\\n    \\\"format_version\\\": \\\"1\\\",\\n    \\\"items\\\": {\\n        \\\"minecraft:apple\\\": [\\n            {\\n                \\\"name\\\": \\\"test_food\\\",\\n                \\\"custom_model_data\\\": 1,\\n                \\\"icon\\\": \\\"apple_golden\\\"\\n            }\\n        ],\\n        \\\"minecraft:diamond_sword\\\": [\\n            {\\n                \\\"name\\\": \\\"test_sword_cmd\\\",\\n                \\\"custom_model_data\\\": 1,\\n                \\\"icon\\\": \\\"sword\\\"\\n            },\\n            {\\n                \\\"name\\\": \\\"test_sword_damage\\\",\\n                \\\"damage_predicate\\\": 1,\\n                \\\"icon\\\": \\\"sword\\\"\\n            }\\n        ]\\n    }\\n}\\n\")), mdx(\"p\", null, \"Any converter that operates without a Geyser extension to register its items will need to provide a mappings file in the same format.\"), mdx(\"h2\", {\n    \"id\": \"gathering-models\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#gathering-models\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Gathering Models\"), mdx(\"p\", null, \"In order to begin the conversion process, what needs converting must first be identified. Since no one item entry depends on another, each model gathering subtype may be done in parallel. \"), mdx(\"h3\", {\n    \"id\": \"predicate-entries\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#predicate-entries\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Predicate Entries\"), mdx(\"p\", null, \"The first step in the conversion process is finding all relavent predicate entries. This information is needed to construct the mappings file and decide which models need to be converted. This process can be broken down into steps as following steps, which must be performed on all vanilla item model definitions (contained in the Java resource pack under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"assets/minecraft/models/item/*.json\"), \") for each entry contained in their respective overrides arrays:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Store the identifier of the overridden Java item, which matches the name of the model file (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"diamond_sword\"), \")\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Store or parse the relavent predicate entries, which currently consist of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".predicate.damage\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".predicate.damaged\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".predicate.custom_model_data\"), \":\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".predicate.damage\"), \", convert the given float to a durability value by multiplying the given float by the max durability of the item, and taking the integer ceiling of the result\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".predicate.damaged\"), \", convert the given integer to a boolean, using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \" if the given integer is 1, and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \" if the given integer is 0\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".predicate.custom_model_data\"), \", simply store the given integer value\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"From the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".model\"), \" field of the entry, parse and store the following:\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"the namespace of the predicate entry's model (e.g. in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"minecraft:item/diamond_sword\"), \", the namespace is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"minecraft\"), \")\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"the model path of the predicate entry's model (e.g. in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"minecraft:item/diamond_sword\"), \", the model path is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"item/\"), \")\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"the model name of the predicate entry's model (e.g. in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"minecraft:item/diamond_sword\"), \", the model name is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"diamond_sword\"), \")\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Hash the Java item identifier and relavent predicate values to construct a unique hash for each predicate entry that will persist accross conversions \")), mdx(\"h3\", {\n    \"id\": \"vanilla-item-models\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#vanilla-item-models\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Vanilla Item Models\"), mdx(\"p\", null, \"In some cases, the user may want to convert item models that are not implemented through predicate overrides. In such a case, the model will be displayed at a resource pack level with no intervention required from Geyser. A list of models should be made that satisfies the following criteria:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The model's path also exists in the vanilla resources under \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"assets/minecraft/models/item/*.json\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Less the overrides array, the contents of the file do not match that of the same model path in the vanilla resources\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"this is intended to prevent the bloating of the pack by models that function the same as vanilla models\")))), mdx(\"h3\", {\n    \"id\": \"block-models\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#block-models\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Block Models\"), mdx(\"p\", null, \"Note that while the process for resolving block models for conversion is described here, Geyser does not currently have support for block mappings. The process for identifying which block models need to be converted should follow this outline:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For all files matching \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"assets/minecraft/blockstates/*.json\"), \" from the vanilla resources, construct an array of all listed models, which are contained under the JSON paths \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".multipart.[].apply.model\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".variants.*.model\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For all files in the given resource pack that correspond to a file matching \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"assets/minecraft/blockstates/*.json\"), \" from the vanilla resources construct an array of all listed models using the JSON paths defined above\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Combine these arrays and remove duplicate entries\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Construct an array of all model JSONs in the given resource pack\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Find the union of the model JSONs array and the array derrived from blockstate entries\")), mdx(\"h2\", {\n    \"id\": \"parental-filtering-and-resolution\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#parental-filtering-and-resolution\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Parental Filtering and Resolution\"), mdx(\"p\", null, \"Next, the parental status of each model must be determined, whether the model is a predicate entry or a vanilla item model.\"), mdx(\"h3\", {\n    \"id\": \"parental-resolution\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#parental-resolution\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Parental Resolution\"), mdx(\"p\", null, \"Nearly all models in the vanilla resources use parentals in order to prevent the repetition of common model elements. This means that the textures, elements, and display settings of a given model will not always be listed in a given model file. However, these must be known before the conversion of the model can occur. As a result, these must be resolved for any block or item model that has been identified for conversion. This is one of the most computationally expensive parts of the conversion process. Furthermore, all textures must be known for texture atlas generation to be completed, as the optimal atlas generation process relies on finding texture overlap accross models. Given that these values will be used quite a ways down the road, it may be impractical to store these all in memory, especially since some high element count models can sometimes have file sizes in the tens of megabytes. It would likely be useful to store the texture list of each model in memory since those will be used shortly in the atlas generation step. This process can be performed in parallel for each model. In the case of item models parental resolution should attempt to continue until the end of the parent chain is reached or elements, textures, and display settings have been found for the model. This is the same for block models, except resolution can stop when elements and textures are found, since display settings are not relavent to block models.\"), mdx(\"h3\", {\n    \"id\": \"parental-filtering\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#parental-filtering\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Parental Filtering\"), mdx(\"p\", null, \"Based on the resolved parent, some decisions must be made with regards to the model conversion that will occur later. The most obvious case of this is the parent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minecraft:builtin/generated\"), \". Java models that lead to this parental will render an extruded mesh from a provided texture. There are two ways to mimic this behavior on Bedrock, the pros and cons of which will be discussed in the geometry conversion section.\"), mdx(\"h2\", {\n    \"id\": \"texture-atlas-generation\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#texture-atlas-generation\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Texture Atlas Generation\"), mdx(\"p\", null, \"Texture atlases must be generated for each item model, as Bedrock models when implemented as entities via attachables may only have one texture. Items with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minecraft:builtin/generated\"), \" parent should be excluded from this process, since meither method by which they can be displayed allows for UV manipulation. For models that are used only for blocks, it is technically possible to use material instances instead of atlas generation. This would be most helpful in cases where many block models with shared textures are used, and the traditional method of atlas generation would lead to instability due to the size of the generated atlases.\"), mdx(\"p\", null, \"It should be noted that this is the most difficult part of the pack conversion process from a clientside performance perspective. Since Bedrock supports mobile devices, it is unreasonable to expect that all Bedrock players will have access to a desktop grade GPU. At a maximum, one should aim for generated atlases to be no larger than 4096, though in particularly low spec devices like the Nintendo Switch, even this may be pushing the envelope.\"), mdx(\"h3\", {\n    \"id\": \"atlas-inclusion\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#atlas-inclusion\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Atlas Inclusion\"), mdx(\"p\", null, \"For our purposes, atlas inclusion will be the process of deciding which textures will be combined into atlases. In my opinion, the optimal method for atlas inclusion follows a proposed algorithim, which should be looped over each item model's texture list. The first item model texture list should be placed as the first entry in a list of texture lists. For all subsequent item model texture lists:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Check to see if the new item model texture lists has any overlapping textures with the current list of texture lists\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Any texture lists that overlap with new item model texture list should be combined with each other\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If no texture lists overlap with the new item model texture list, the item model texture list should be placed as its own entry in the list of texture lists\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The process should continue to the next item model texture list until all item model texture lists have been itterated over\")), mdx(\"p\", null, \"There are, however, some drawbacks to this method. As previously stated, the size of generated atlases should be kept at a minimum. In packs in which models use mutliple large shared textures, this will lead to the generation of extremely large atlases. Unfortunately, the solution to this problem will often be to reduce texture resolution and reduce the size of shared texture networks in cases where they lead to this result. Such optimizations will likely need to be done manually.\"), mdx(\"h3\", {\n    \"id\": \"atlas-construction\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#atlas-construction\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Atlas Construction\"), mdx(\"p\", null, \"Atlases should, of course, be constructed to minimize empty space. In addition, the location of all textures on atlases must be recorded. This is needed to direct UV shifts in the actual model conversion process. The X and Y pixel coordinates and texture path are sufficent.\"), mdx(\"h2\", {\n    \"id\": \"geometry-conversion\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#geometry-conversion\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Geometry Conversion\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#resource-pack-conversion","title":"Resource Pack Conversion","items":[{"url":"#introduction","title":"Introduction"},{"url":"#concept","title":"Concept"},{"url":"#gathering-models","title":"Gathering Models","items":[{"url":"#predicate-entries","title":"Predicate Entries"},{"url":"#vanilla-item-models","title":"Vanilla Item Models"},{"url":"#block-models","title":"Block Models"}]},{"url":"#parental-filtering-and-resolution","title":"Parental Filtering and Resolution","items":[{"url":"#parental-resolution","title":"Parental Resolution"},{"url":"#parental-filtering","title":"Parental Filtering"}]},{"url":"#texture-atlas-generation","title":"Texture Atlas Generation","items":[{"url":"#atlas-inclusion","title":"Atlas Inclusion"},{"url":"#atlas-construction","title":"Atlas Construction"}]},{"url":"#geometry-conversion","title":"Geometry Conversion"}]}]}}},"pageContext":{"id":"bb1d0229-a2a1-5142-8ebb-00a5139a3112"}},
    "staticQueryHashes": ["1022386572","1122327541","1339625561","4275725850"]}