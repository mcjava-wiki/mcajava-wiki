{
    "componentChunkName": "component---src-templates-doc-js",
    "path": "/docs/basics/understanding-json",
    "result": {"data":{"mdx":{"fields":{"pageType":"doc","title":"Understanding JSON","editLink":"https://github.dev/mcjava-wiki/mcjava-wiki/blob/main/pages/docs/basics/understanding-json.mdx"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Understanding JSON\",\n  \"section\": \"Basics\",\n  \"slug\": \"/docs/basics/understanding-json\",\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"understanding-json\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#understanding-json\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Understanding JSON\"), mdx(\"p\", null, \"JSON, an acronym for JavaScript Object Notation, is the standard format used for nearly all text based resource pack entries. It is a hierarchical system of representing data, and contains multiple data types. Understanding the structure and syntax of JSON is key to effectively creating resource packs.\"), mdx(\"h2\", {\n    \"id\": \"structure\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#structure\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Structure\"), mdx(\"p\", null, \"JSON exists in a hierarchy. Here is an example of such a structure from a modified \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sounds.json\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"title={assets/minecraft/sounds.json}\",\n    \"title\": \"{assets/minecraft/sounds.json}\"\n  }, \"{\\n  \\\"ambient.cave\\\": {\\n    \\\"sounds\\\": [\\n      \\\"ambient/cave/cave1\\\",\\n      \\\"ambient/cave/cave2\\\",\\n      \\\"ambient/cave/cave3\\\"\\n    ],\\n    \\\"subtitle\\\": \\\"subtitles.ambient.cave\\\"\\n  },\\n  \\\"ambient.basalt_deltas.loop\\\": {\\n    \\\"sounds\\\": [\\n      {\\n        \\\"name\\\": \\\"ambient/nether/basalt_deltas/ambience\\\",\\n        \\\"stream\\\": true,\\n        \\\"volume\\\": 0.5\\n      }\\n    ]\\n  }\\n}\\n\")), mdx(\"p\", null, \"We'll use this example to analyze the various components of JSON.\"), mdx(\"h2\", {\n    \"id\": \"data-types\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#data-types\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Data Types\"), mdx(\"p\", null, \"JSON uses multiple data types. Understanding what each data type stores, when to use it, and how it is formatted will be critical for various aspects of resource pack development.\"), mdx(\"h3\", {\n    \"id\": \"strings\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#strings\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Strings\"), mdx(\"p\", null, \"A string is simply any text enclosed by quotes, excluding new line characters. An example of a string in the above excerpt is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"ambient/cave/cave1\\\"\"), \". It is important to stress that a string is the only data type enclosed by quotes\"), mdx(\"h3\", {\n    \"id\": \"numbers\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#numbers\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Numbers\"), mdx(\"p\", null, \"A number is, as it sounds, a number. Note that placing a number in quotes will make make it a string, as only strings are quoted. An example of a number in the above example is the decimal \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.5\"), \". Numbers may be positive or negative. They may also be represented in exponent notation. For example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"5E-1\"), \" would be a valid equivalent of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.5\"), \".\"), mdx(\"h3\", {\n    \"id\": \"booleans\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#booleans\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Booleans\"), mdx(\"p\", null, \"A boolean is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" or false \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \". In the above example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" is a boolean. Like numbers, enclosing a boolean in quotes will produce a string.\"), mdx(\"h3\", {\n    \"id\": \"arrays\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#arrays\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Arrays\"), mdx(\"p\", null, \"Arrays can be thought of as a comma separated list of any data type, including objects, which are discussed below. Arrays are enclosed by brackets (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[...]\"), \"). In the above example, the following is an array:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"[\\n  \\\"ambient/cave/cave1\\\",\\n  \\\"ambient/cave/cave2\\\",\\n  \\\"ambient/cave/cave3\\\"\\n]\\n\")), mdx(\"p\", null, \"Though this array consists of only strings, the data types in an array can be mixed and matched as needed. Note that the last piece of data in the array is not followed by a comma. This is one of the most common mistakes by beginners. Using a JSON linter or a text editor with builtin syntax checking will help you to avoid such mistakes.\"), mdx(\"h3\", {\n    \"id\": \"objects\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#objects\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Objects\"), mdx(\"p\", null, \"Objects consist of a comma separated list of key:value pairs enclosed by elipses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{...}\"), \". The key must be a string, while the value may be any of the aforementioned data types, including another object. In the above example, the following is a simple object, in which the key and value are both strings:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"subtitle\\\": \\\"subtitles.ambient.cave\\\"\\n}\\n\")), mdx(\"p\", null, \"Here, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"subtitle\\\"\"), \" is the key, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"subtitles.ambient.cave\\\"\"), \" is the value. The key and the value are always separated by a colon. Like arrays, the final key:value pair is not succeeded by a comma. As the above key:value pair is the first and last in the object, it is not followed by a comma. Data types can, of course be nested, such is this excerpt from above:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"ambient.basalt_deltas.loop\\\": {\\n    \\\"sounds\\\": [\\n      {\\n        \\\"name\\\": \\\"ambient/nether/basalt_deltas/ambience\\\",\\n        \\\"stream\\\": true,\\n        \\\"volume\\\": 0.5\\n      }\\n    ]\\n  }\\n}\\n\")), mdx(\"p\", null, \"Here, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"ambient.basalt_deltas.loop\\\"\"), \" is the key of an object, whose value is also an object. Nested inside this object, the another object with the key of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"sounds\\\"\"), \" is present. The value of this object is then an array, which contains a single object consisting of three key:value pairs. Note again that the last value in an array or object is not followed by a comma.\"), mdx(\"h2\", {\n    \"id\": \"key-takeaways\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#key-takeaways\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Key Takeaways\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JSON is a hierarchical format used in nearly all text-based data files in Minecraft resource packs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The main JSON data types are:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Strings, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"ambient/cave/cave1\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Numbers, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0.5\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Booleans, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Arrays, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[1, 2, \\\"three\\\"]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Objects, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{\\\"key\\\": \\\"value\\\"}\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When listing pieces of data in arrays and objects, commas are succeed all but the final entry\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Objects and arrays can be continuously nested\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#understanding-json","title":"Understanding JSON","items":[{"url":"#structure","title":"Structure"},{"url":"#data-types","title":"Data Types","items":[{"url":"#strings","title":"Strings"},{"url":"#numbers","title":"Numbers"},{"url":"#booleans","title":"Booleans"},{"url":"#arrays","title":"Arrays"},{"url":"#objects","title":"Objects"}]},{"url":"#key-takeaways","title":"Key Takeaways"}]}]}}},"pageContext":{"id":"ed35d7e3-55cf-503b-ae5a-2abc1f203280"}},
    "staticQueryHashes": ["1022386572","1122327541","1339625561","4275725850"]}